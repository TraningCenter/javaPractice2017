@startuml
com.netcracker.unc.ApplicationManager *-up- Building
com.netcracker.unc.ApplicationManager *-right- BuildingVisualizer
com.netcracker.unc.ApplicationManager *-left- CommandManager

Building "1" *-up- "N" com.netcracker.unc.logic.Floor
Building "1" *-up- "N" Shaft
Shaft *-left- IElevator
Shaft "1" o-right- "N" com.netcracker.unc.logic.Floor
com.netcracker.unc.logic.Floor "1" o-right- "N" IPassenger
com.netcracker.unc.logic.Floor <|-up- com.netcracker.unc.logic.interfaces.buttons.IFloorButton
IElevator "1" o-right- "N" IPassenger
IElevator "1" o-- "N" com.netcracker.unc.logic.Floor
IElevator .right.> State
IPassenger .up.> State
IPassenger <|-down- Passenger
IElevator <|-left- Elevator
com.netcracker.unc.logic.interfaces.buttons.IButton <|-- com.netcracker.unc.logic.interfaces.buttons.IFloorButton
com.netcracker.unc.logic.interfaces.buttons.IButton <|-down- com.netcracker.unc.logic.interfaces.buttons.IElevatorButton
IElevator <|-up- com.netcracker.unc.logic.interfaces.buttons.IElevatorButton

BuildingVisualizer .right.> VisualizerConfig
BuildingVisualizer "1" *-- "N" ElevatorPicture
BuildingVisualizer "1" *-- "N" FloorPicture
ElevatorPicture .up.> VisualizerConfig
FloorPicture .up.> VisualizerConfig
ElevatorPicture -down-|> IPicture
FloorPicture -down-|> IPicture

CommandManager *-left- ICommand
ICommand <|-up- IElevatorCommand
ICommand <|-down- IPassengerCommand
ICommand <|-left- IFloorCommand
IElevatorCommand <|-up- MoveElevatorCommand
IElevatorCommand <|-up- LoadPassengersElevatorCommand
IElevatorCommand <|-up- UnLoadPassengersElevatorCommand
IElevatorCommand <|-left- OpenDoorsElevatorCommand
IElevatorCommand <|-left- CloseDoorsElevatorCommand
IElevatorCommand <|-right- StopElevatorCommand
IPassengerCommand <|-down- CallElevatorPassengerCommand
IPassengerCommand <|-down- ChooseFloorPassengerCommand
IFloorCommand <|-left- AddNewPassengerFloorCommand
IFloorCommand <|-down- DeletePassengerFloorCommand


Interface IPassenger {
+ int getStartFloor()
+ int getDestinationFloor()
+ int getWeight()
+ State getDirection()
}

Class Passenger {
- startFloor
- destinationFloor
- weight
- probabilityOfChoice
+ int getStartFloor()
+ int getDestinationFloor()
+ int getWeight()
+ State getDirection()
}


Class com.netcracker.unc.logic.Floor {
- id
- listOfPassengers
+ int getId()
+ int getListOfPassengers()
+ void addPassenger(IPassenger passenger)
+ void deletePassenger(IPassenger passenger)
+ void callElevatorToDown()
+ void callElevatorToUp()
}

Class Building {
- listOfShafts
- listOfFloors
+ void addFloor(com.netcracker.unc.logic.Floor startFloor)
+ void addShaft(Shaft shaft)
}

Interface IElevator {
+ List<IPassenger> getPassengers()
+ List<IFloor> getAvailableFloors()
+ void setAvailableFloors(List<IFloor> floors)
+ void addPassenger(IPassenger passenger)
+ void deletePassenger(IPassenger passenger)
+ void addFloorInQueue(IFloor startFloor)
+ IFloor getNextDestinationFloor()
+ void deleteFloorFromQueue(IFloor startFloor)
+ void countRemainingCapacity(int currentWeight)
+ void setState(State state)
+ void goToFloor(com.netcracker.unc.logic.Floor startFloor)
}

Class Elevator {
- id
- state
- currentFloor
- listOfAvailableFloors
- listOfPassengers
- queueOfFloorsToVisit
- capacity
- remainingCapacity
+ List<IPassenger> getPassengers()
+ List<IFloor> getAvailableFloors()
+ void setAvailableFloors(List<IFloor> floors)
+ void addPassenger(IPassenger passenger)
+ void deletePassenger(IPassenger passenger)
+ void addFloorInQueue(IFloor startFloor)
+ IFloor getNextDestinationFloor()
+ void deleteFloorFromQueue(IFloor startFloor)
+ void countRemainingCapacity(int currentWeight)
+ void setState(State state)
+ void goToFloor(com.netcracker.unc.logic.Floor startFloor)
}

class Shaft{
- id
- elevator
- listOfFloors
+ void setFloors(List<com.netcracker.unc.logic.Floor> floors)
+ void setElevator(IElevator elevator) 
}

interface com.netcracker.unc.logic.interfaces.buttons.IButton {
}

interface com.netcracker.unc.logic.interfaces.buttons.IFloorButton {
+ void callElevatorToDown()
+ void callElevatorToUp()
}

interface com.netcracker.unc.logic.interfaces.buttons.IElevatorButton {
+ void goToFloor(com.netcracker.unc.logic.Floor startFloor)
}

Class com.netcracker.unc.ApplicationManager {
- building
- buildingVisualizer
- commandManager
+ {static} void main(String[] args)
- {static} void createBuilding()
}

Enum State {
UP
DOWN
STOPPED
}

interface ICommand {
+ void execute()
}

interface IPassengerCommand {
+ void execute()
}

interface IElevatorCommand {
+ void execute()
}

interface IFloorCommand {
+ void execute()
}

class AddNewPassengerFloorCommand {
- passenger
- startFloor
+ void execute()
}

class DeletePassengerFloorCommand {
- passenger
- startFloor
+ void execute()
}

class MoveElevatorCommand {
- elevator
- startFloor
+ void execute()
}

class LoadPassengersElevatorCommand {
- listOfPassengers
- elevator
+ void execute()
}


class UnLoadPassengersElevatorCommand {
- listOfPassengers
- elevator
+ void execute()
}

class OpenDoorsElevatorCommand {
- elevator
+ void execute()
}

class CloseDoorsElevatorCommand {
- elevator
+ void execute()
}

class StopElevatorCommand {
- elevator
+ void execute()
}

class CallElevatorPassengerCommand {
- startFloor
+ void execute()
}

class ChooseFloorPassengerCommand {
- elevator
- startFloor
+ void execute()
}

class CommandManager {
- queueOfCommands
+ void executeNextCommand()
+ void addCommand(ICommand command)
}

Class BuildingVisualizer {
- listOfElevatorPictures
- listOfFloorPictures
+ void visualize()
}

interface IPicture {
+ int getXCoordinate()
+ int getYCoordinate()
+ draw(int x, int y)
}

Class ElevatorPicture {
- id
- yCoordinate
- countOfPassengers
- isOpened
+ int getXCoordinate()
+ int getCurrentFloor()
+ void setCountOfPassengers(int count)
+ boolean IsOpened()
+ draw(int x, int y)
}

Class FloorPicture {
- id
- countOfPassengers
- isPushedUp
- isPushedDown
+ int getXCoordinate()
+ int getYCoordinate()
+ void setCountOfPassengers(int count)
+ draw(int x, int y)
}

Class VisualizerConfig {
- {static} final int elevatorWidth
- {static} final int elevatorHeight
- {static} final int floorWidth
- {static} final int separatorWidth
- {static} final int buildingWidth
- {static} final int buildingHeight
}
@enduml